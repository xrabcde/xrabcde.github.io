I"-7<h2 id="1-체스---step12">1. 체스 - step1,2</h2>
<h3 id="rest-api">REST API</h3>
<ul>
  <li><a href="https://meetup.toast.com/posts/92">REST API 제대로 알고 사용하기</a></li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring</li>
</ul>

<h3 id="spring-데이터베이스-초기설정">Spring 데이터베이스 초기설정</h3>
<ul>
  <li><a href="https://wan-blog.tistory.com/52">Spring 데이터베이스 Schema 및 Data 초기설정하기</a></li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, MySQL, DB</li>
</ul>

<h3 id="dto">DTO</h3>
<ul>
  <li>각 팀의 score를 dto를 사용해 전달하고 js에서 score 메세지를 생성하도록 했다.</li>
  <li>에러 상황에 대해 js에서 alert를 띄우기 위해 ResponseDto를 만들어 status code와 에러메시지를 전달했다.</li>
</ul>

<h3 id="jdbctemplate">JdbcTemplate</h3>
<ul>
  <li>JdbcTemplate를 사용해 DB의 정보에 접근했다.</li>
  <li>query, queryForList 등의 메서드를 학습했다.</li>
  <li><a href="https://github.com/next-step/spring-learning-test/tree/jdbc">JDBC 학습테스트</a></li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, DB</li>
</ul>

<h2 id="2-체스---step3">2. 체스 - step3</h2>
<h3 id="계층관계에-맞춰-api-uri-설계하기">계층관계에 맞춰 API URI 설계하기</h3>
<ul>
  <li>URI 설계 시 슬래시(/)는 계층관계를 나타내는 데 사용</li>
  <li>마지막 문자로 슬래시(/)를 포함하지 않는다.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://restapi.example.com/rooms/{roomId}/move
http://restapi.example.com/rooms/{roomId}/board
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, REST API, HTTP</li>
  <li><a href="https://meetup.toast.com/posts/92">참고링크</a></li>
</ul>

<h3 id="dto-1">DTO</h3>
<ul>
  <li>Data Transfer Object, 계층간 데이터 교환을 위해 사용하는 객체</li>
  <li>클라이언트 요청에 포함된 데이터를 담아 서버측에 전달, 서버 측의 응답 데이터를 담아 클라이언트에 전달하는 계층간 전달자 역할</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring Boot, Layer</li>
  <li><a href="https://woowacourse.github.io/javable/post/2021-04-25-dto-layer-scope/">참고링크</a></li>
</ul>

<h2 id="3-지하철1노선도관리---step12">3. 지하철1(노선도관리) - step1,2</h2>
<h3 id="acceptance-test">Acceptance Test</h3>
<ul>
  <li>개발된 시스템이 고객의 요구사항과 일치하는지 확인하기 위해 고객의 입장에서 수행하는 테스트</li>
  <li>초점이 기술쪽인 단위테스트와는 달리 초점이 비즈니스 쪽이다</li>
  <li>목적
    <ul>
      <li>확신 : 시스템이나 시스템의 일부 또는 특정한 비기능적인 특성에 대한 확신을 얻는 것</li>
      <li>배포가능성 평가 : 결함을 찾는 것이 아니라 시스템을 배포하거나 사용할 준비가 되었는지 평가</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Test, TDD, ATDD</li>
</ul>

<h3 id="batchupdate">BatchUpdate</h3>
<ul>
  <li>구간정보를 한 번에 DB에 insert하기 위해 사용
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//내부적으로 batchList를 batchSize만큼 처리
jdbcTemplate.batchUpdate(INSERT_SQL, batchList, batchSize, (ps, arg) -&gt; {})
jdbcTemplate.batchUpdate(INSERT_SQL, sections, sections.size(), (ps, arg) -&gt; {})
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring boot, JDBC, batchUpdate</li>
  <li><a href="https://woowabros.github.io/experience/2020/09/23/hibernate-batch.html?fbclid=IwAR0mKmOVyJuLYF8N3uRkelNSdFxkK8Mw0DGg4HFC64T2p0XtvqZ-2y1Tusw">참고링크</a></li>
</ul>

<h3 id="customexception">CustomException</h3>
<ul>
  <li>커스텀 예외를 사용함으로써 얻을 수 있는 이점
    <ul>
      <li>이름으로도 정보 전달이 가능</li>
      <li>상세한 예외 정보 제공</li>
      <li>예외에 대한 응집도 향상</li>
      <li>예외 발생 후 처리가 용이</li>
      <li>예외 생성 비용 절감</li>
    </ul>
  </li>
  <li>중복되는 역/노선의 이름을 검증하고 찾는 역/노선/구간이 없을 경우를 검증하기 위해 사용</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring boot, Exception</li>
  <li><a href="https://woowacourse.github.io/javable/post/2020-08-17-custom-exception/">참고링크</a></li>
</ul>

<h2 id="4-지하철1노선도관리---step3">4. 지하철1(노선도관리) - step3</h2>
<h3 id="web-application-layer">Web Application Layer</h3>
<p><img src="https://github.com/binghe819/TIL/raw/master/Network/Layer/image/web_layer.png" alt="img" /></p>
<ul>
  <li><strong>Controller</strong> : 웹 어플리케이션 최상위 영역, <strong>외부 요청</strong>인 사용자의 입력을 처리하고, 올바른 <strong>응답을 사용자에게 반환</strong>하는 역할.</li>
  <li><strong>Service</strong> : Controller와 Dao의 중간 영역, Dao가 DB에서 받아온 <strong>데이터를 전달받아 가공</strong>, Domain Model을 묶어서 이 소프트웨어에서 사용 가능한 핵심 작업 집합을 설정하는 역할<br />
  == 이 소프트웨어가 수행해야 하는 작업을 명시<br />
  == 이 소프트웨어에게 내릴 수 있는 명령을 명시</li>
  <li><strong>Repository</strong> : 가장 낮은 계층으로 사용되는 데이터 스토리지 계층과 통신하는 역할, <strong>데이터베이스에 접근</strong>하는 영역 (ex. DAO)</li>
  <li>특정 계층에 속하는 요소들은 <strong>동일한 혹은 그 아래에 있는 계층</strong>에 속하는 요소를 사용할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Network, Web, Layer</li>
  <li><a href="https://www.petrikainulainen.net/software-development/design/understanding-spring-web-application-architecture-the-classic-way/">참고링크1</a>, <a href="https://lifelife7777.tistory.com/100">참고링크2</a>, <a href="https://umbum.dev/1066">참고링크3</a>, <a href="https://github.com/binghe819/TIL/blob/master/Network/Layer/WebLayer.md">참고링크4</a></li>
</ul>

<h3 id="controlleradvice">ControllerAdvice</h3>
<ul>
  <li>@Controller나 @RestController에서 발생한 예외를 한 곳에서 관리하고 처리할 수 있게 도와주는 어노테이션</li>
  <li>Controller에서 발생한 예외를 catch하여 처리하는 클래스</li>
  <li>메서드 위에 @ExceptionHandler를 선언하여 등록한 예외를 catch</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, Annotation, Custom Exception, Exception Handle</li>
</ul>

<h2 id="5-지하철2로그인경로조회---step12">5. 지하철2(로그인/경로조회) - step1,2</h2>
<h3 id="dispatcher-servlet">Dispatcher Servlet</h3>
<ul>
  <li>Servlet Container로부터 들어오는 요청을 관제하는 컨트롤러</li>
  <li>일반적으로 Servlet Container는 DispatcherServlet만 등록해놓고 Dispatcher Servlet이 HandlerMapping을 통해 적절한 Controller로 매핑</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, Spring MVC, Servlet</li>
</ul>

<h3 id="argument-resolver">Argument Resolver</h3>
<ul>
  <li>Controller에 들어오는 파라미터를 가공 (ex. 암호화된 내용 복호화)</li>
  <li>파라미터를 추가하거나 수정해야 하는 경우 사용
    <ul>
      <li>Controller에서 파라미터를 가공/추가/수정할 수 있기 때문에 없어도 문제는 없다.</li>
    </ul>
  </li>
  <li>장점
    <ul>
      <li>중복을 최소화해 깔끔한 코드 작성</li>
      <li><strong>Controller의 파라미터에 대한 공통 기능 제공</strong></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, Spring MVC, Resolver</li>
</ul>

<h3 id="spring-mvc-동작과정">Spring MVC 동작과정</h3>
<p><img src="https://github.com/binghe819/TIL/raw/master/Spring/MVC/image/mvc-flow.png" alt="img" /></p>
<ul>
  <li>Client Request 요청</li>
  <li>Dispatcher Servlet에서 해당 요청 처리</li>
  <li>Client Request에 대한 Handler Mapping
    <ol>
      <li>RequestMapping에 대한 매칭 (RequestMappingHandlerAdapter)</li>
      <li>Interceptor 처리</li>
      <li><strong>Argument Resolver</strong> 처리</li>
      <li>Message Converter 처리</li>
    </ol>
  </li>
  <li>Controller Method invoke</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, Spring MVC</li>
  <li><a href="https://github.com/binghe819/TIL/blob/master/Spring/MVC/Spring%20MVC%20flow.md">참고링크</a></li>
</ul>

<h2 id="6-지하철2로그인경로조회---step3">6. 지하철2(로그인/경로조회) - step3</h2>
<h3 id="optional-바르게-쓰기">Optional 바르게 쓰기</h3>
<ul>
  <li>isPresent()-get() 대신 orElse()/orElseGet()/orElseThrow()</li>
  <li>Dao에서 findByEmail과 같이 특정 컬럼으로 회원을 조회할 때 Optional을 사용함</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, Java</li>
  <li><a href="http://homoefficio.github.io/2019/10/03/Java-Optional-%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%93%B0%EA%B8%B0/">참고링크</a></li>
</ul>

<h3 id="제네릭과-로-타입">제네릭과 로 타입</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">List</code> 는 제네릭 타입과 무관한 것이고, <code class="language-plaintext highlighter-rouge">List&lt;Object&gt;</code> 는 모든 타입을 허용한다는 뜻</li>
  <li>최단경로 라이브러리를 사용할 때 로타입에 주의해야 함</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> :  Java, Jgrapht</li>
  <li><a href="https://madplay.github.io/post/dont-use-raw-types">참고링크</a></li>
</ul>

<h3 id="requestparam과-modelattribute">RequestParam과 ModelAttribute</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">RequestParam</code>: 사용자가 요청 시 전달하는 값을 Handler의 매개변수로 1:1 매핑할 때 사용되는 어노테이션</li>
  <li><code class="language-plaintext highlighter-rouge">ModelAttribute</code> : 사용자가 요청 시 전달하는 값을 오브젝트 형태로 매핑해주는 어노테이션</li>
  <li>전달하는 값이 여러 개인 경우, ModelAttribute을 사용하면 유지보수에 좋음</li>
  <li>최단경로 조회 시 출발역과 도착역을 전달하기 위해 ModelAttribute을 적용함</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, Annotation</li>
  <li><a href="https://galid1.tistory.com/769">참고링크</a></li>
</ul>

<h3 id="valid">@Valid</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">org.springframework.boot:spring-boot-starter-validation</code> 의존성 추가</li>
  <li><code class="language-plaintext highlighter-rouge">@Valid</code>가 설정된 메서드가 호출될 때 유효성 검사를 진행한다</li>
  <li>경로 조회 시 요청 데이터에 대한 검증을 해주기 위해 @NotNull, @Size 등을 적용함</li>
  <li><code class="language-plaintext highlighter-rouge">태그</code> : Spring, Annotation</li>
  <li><a href="https://meetup.toast.com/posts/223">참고링크1</a></li>
  <li><a href="https://gaemi606.tistory.com/entry/Spring-Boot-ResponseBody-%EA%B0%81-%ED%95%AD%EB%AA%A9%EC%97%90-%ED%81%AC%EA%B8%B0-%ED%95%84%EC%88%98-%EA%B0%92-%EC%84%A4%EC%A0%95-spring-boot-starter-validation">참고링크2</a></li>
</ul>

<h2 id="7-지하철3협업미션">7. 지하철3(협업미션)</h2>
<h3 id="클래스에-abstract-혹은-final">클래스에 abstract 혹은 final</h3>
<ul>
  <li>final 클래스 : 클래스에 final을 사용하게 되면 최종상태가 되어 더이상 상속 불가능
final 로 선언되면 상속받을 수 없기 때문에 당연히 내부의 모든 메서드는 overriding 될 수 없음</li>
  <li>클래스를 설계하는 단계에서 해당 클래스는 상속을 위한 클래스다! 혹은 상속을 고려하지 않는 클래스다! 라는 의도를 전달하는 것이 목적<br />
=&gt; 많은 인원으로 프로젝트를 진행하거나, 코드가 장기간 유지보수 되는 경우</li>
  <li><a href="https://velog.io/@ednadev/%EC%9E%90%EB%B0%94-%EC%B6%94%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4abstract-class-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%84%9C%EB%93%9C%EC%99%80-final">참고링크</a></li>
</ul>

<h3 id="책임-연쇄-패턴">책임 연쇄 패턴</h3>
<ul>
  <li>명령 객체와 일련의 처리 객체를 포함하는 디자인 패턴</li>
  <li>체이닝 되어 있는 거리 요금 정책을 추상화하기 위해 사용</li>
  <li>각 체인이 다음 계산을 위한 체인을 가짐</li>
  <li>요청을 보내는 객체와 이를 처리하는 객체간의 결합도를 느슨하게 하기 위한 방법</li>
  <li><a href="https://k0102575.github.io/articles/2020-02/chain-of-responsibility-pattern">참고링크</a></li>
</ul>

<p>=&gt; 디자인패턴과 abstract/final 모두 <strong>불필요한 커뮤니케이션 없이 코드를 통해 어떠한 목적을 이루고자 했는가를 나타내는 방법!!</strong></p>

<h3 id="exception-전략">Exception 전략</h3>
<ul>
  <li>통일된 예외 객체를 만들고, ControllerAdvice의 유지보수를 위해 exception을 한단계 추상화한 SubwayException을 만들었음</li>
  <li>SubwayException에 status 필드를 추가해 각 exception 별로 status를 가질 수 있도록 함</li>
  <li>ControllerAdvice에서는 SubwayException만 핸들링해주면 된다</li>
  <li><a href="https://cheese10yun.github.io/spring-guide-exception/">참고링크</a></li>
</ul>
:ET