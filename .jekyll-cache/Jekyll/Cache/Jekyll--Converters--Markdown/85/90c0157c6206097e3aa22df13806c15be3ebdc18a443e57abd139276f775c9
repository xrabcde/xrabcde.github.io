I"	<h2 id="일급-함수">일급 함수</h2>
<p>일반값처럼 취급할 수 있는 함수를 <strong>일급 함수</strong>라고 한다. 함수형 프로그래밍 언어에선 함수를 일반값처럼
사용해서 인수로 전달하거나, 결과로 반환받거나, 자료구조에 저장할 수 있다.</p>

<h3 id="고차원-함수">고차원 함수</h3>
<ol>
  <li>하나 이상의 함수를 인자로 받거나</li>
  <li>함수를 결과로 반환하거나</li>
</ol>

<p>둘 중 하나라도 조건이 맞으면 <strong>고차원 함수</strong>라고 부른다. 함수를 다룰 수 있는 또 다른 함수</p>

<h3 id="커링">커링</h3>
<p>함수를 모듈화하고 코드를 재사용할 수 있는 기법 중 하나.</p>
<ol>
  <li>인자를 여러 개 받는 함수를 분리하여, 인자를 하나씩만 받는 함수의 체인으로 만드는 방법</li>
  <li>다중 인수를 갖는 함수를 단일 인수를 갖는 함수들의 함수열로 바꾸는 방법</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//기존 코드
static double converter(double x, double y, double z) {
    return x * y + z;
}

//커링 적용
static DoubleUnaryOperator curriedConverator(double y, double z) {
    return (double x) -&gt; x * y + z;
}

//변환기(함수)를 반환하는 함수를 재사용
DoubleUnaryOperator convertCtoF = curriedConverter(9.0 / 5, 32);
DoubleUnaryOperator convertUSDtoGBP = curriedConverter(0.6, 0);
DoubleUnaryOperator convertKmtoMi = curriedConverter(0.6214, 0);

convertCtoF.applyAsDouble(24);
convertUSDtoGBP.applyAsDouble(100);
convertKmtoMi.applyAsDouble(20);
</code></pre></div></div>

<h2 id="영속-자료구조">영속 자료구조</h2>
<p>자료구조를 갱신하면 그것을 참조하는 다른 곳에서 모두 영향을 받으므로 여러 부작용을 발생시킨다.
<strong>결과 자료구조를 바꾸지 말라</strong> 하지만, 자료구조 갱신 시마다 자료구조를 통째로 복사하는 건 낭비다.</p>

<h3 id="트리-예제">트리 예제</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zs = xs.append(ys);
</code></pre></div></div>
<p>다른 자료구조와 공통부분을 공유하여 메모리를 절약할 수 있다.</p>
:ET